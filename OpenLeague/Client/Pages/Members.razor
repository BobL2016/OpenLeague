@page "/members"
@using OpenLeague.Shared
@attribute [Authorize(Roles = "CanViewMembersPage")]
@inject HttpClient Http

<h1>Members</h1>

@if (members == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <td>
                    <span class="sort-link" @onclick="@(() => SortTable("Id"))">Id</span>
                </td>
                <td>
                    <span class="sort-link" @onclick="@(() => SortTable("FirstName"))">Last Name</span>
                </td>
                <td>
                    <span class="sort-link" @onclick="@(() => SortTable("LastName"))">Last Name</span>
                </td>
                <td>
                    <span class="sort-link" @onclick="@(() => SortTable("GHIN"))">GHIN</span>
                </td>
                <td>
                    <span class="sort-link" @onclick="@(() => SortTable("HandicapIndex"))">Handicap Index</span>
                </td>
            </tr>
        </thead>
        <tbody>
            @foreach (Member member in members)
            {
                <tr>
                    <td>@member.Id</td>
                    <td>@member.FirstName</td>
                    <td>@member.LastName</td>
                    <td>@member.GHIN</td>
                    <td>@member.HandicapIndex</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {

    private IList<Member> members;
    private string CurrentSortColumn;
    private bool IsSortedAscending;

    protected override async Task OnInitializedAsync()
    {
        members = await Http.GetFromJsonAsync<Member[]>("api/Members");

        SortTable("Id");
    }

    private void SortTable(string columnName)
    {
        if (columnName != CurrentSortColumn)
        {
            members = members.OrderBy(x =>
                                       x.GetType()
                                       .GetProperty(columnName)
                                       .GetValue(x, null))
                             .ToList();
            CurrentSortColumn = columnName;
            IsSortedAscending = true;
        }
        else
        {
            if (IsSortedAscending)
            {
                members = members.OrderByDescending(x =>
                    x.GetType()
                    .GetProperty(columnName)
                    .GetValue(x, null))
                    .ToList();
            }
            else
            {
                members = members.OrderBy(x =>
                    x.GetType()
                    .GetProperty(columnName)
                    .GetValue(x, null))
                    .ToList();
            }
            IsSortedAscending = !IsSortedAscending;
        }
    }
}

<style>

    .sort-link {
        cursor: pointer;
        color: blue;
        text-decoration: underline;
    }
</style>