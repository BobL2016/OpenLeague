@page "/scheduleitems"
@attribute [Authorize(Roles = "CanViewSchedulePage")]

<h1>2021 Schedule</h1>

@if (scheduleItems == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <td>
                    <span class="sort-link" @onclick="@(() => SortTable("Date"))">Date</span>
                </td>
                <td>Title</td>
                <td>Format</td>
            </tr>
        </thead>
        <tbody>
            @foreach (var scheduleItem in scheduleItems)
            {
                <tr>
                    <td>@scheduleItem.Date</td>
                    <td>@scheduleItem.Title</td>
                    <td>@scheduleItem.Format</td>
                </tr>
            }
        </tbody>
    </table>
}

@inject HttpClient Http;

@code {

    IList<ScheduleItem> scheduleItems;

    private string CurrentSortColumn;
    private bool IsSortedAscending;

    protected override async Task OnInitializedAsync()
    {
        scheduleItems = await Http.GetFromJsonAsync<ScheduleItem[]>("api/ScheduleItems");
        var query = from item in scheduleItems
                    orderby item.Date
                    select item;
        scheduleItems = query.ToArray<ScheduleItem>();
        SortTable("Date");

    }

    private void SortTable(string columnName)
    {
        if (columnName != CurrentSortColumn)
        {
            scheduleItems = scheduleItems.OrderBy(x =>
                                   x.GetType()
                                   .GetProperty(columnName)
                                   .GetValue(x, null))
                         .ToList();
            CurrentSortColumn = columnName;
            IsSortedAscending = true;
        }
        else
        {
            if (IsSortedAscending)
            {
                scheduleItems = scheduleItems.OrderByDescending(x =>
                x.GetType()
                .GetProperty(columnName)
                .GetValue(x, null))
                .ToList();
            }
            else
            {
                scheduleItems = scheduleItems.OrderBy(x =>
                x.GetType()
                .GetProperty(columnName)
                .GetValue(x, null))
                .ToList();
            }
            IsSortedAscending = !IsSortedAscending;
        }
    }
}

<style>

    .sort-link {
        cursor: pointer;
        color: blue;
        text-decoration: underline;
    }
</style>